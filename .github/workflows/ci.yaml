name: Colabot PY CI
on:
  pull_request:
    branches: [dev]
jobs:
  linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.0]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - run: pip install virtualenv
    - run: make pylint
    - run: make check-format

  build-image:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io # registry
      IMAGE_NAME: ${{ github.repository }} # "ciscops/colabot-dev"

    steps:
      - name: install jinja2
        run: |
          sudo apt-get install python3-pip
          pip install jinja2

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASS }} # set up secret token with access rights to packages

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          network: host
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: check tags    
        run: |
          echo ${{ steps.meta.outputs.tags }}
          echo ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-image
    runs-on: self-hosted

    steps:
      - name: Get kubeConfig file from secrets
        run: |
          if [ ! -d ${HOME}/.kube ] ; then
            mkdir ${HOME}/.kube
          fi
          echo "${{ secrets.KUBE_CONFIG }}" > ${HOME}/.kube/config

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.EKS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.EKS_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Convert j2 template to yaml
        run: python3 process-j2.py
        env:
          TLS_CRT_DEV: ${{ secrets.TLS_CRT_DEV }}
          TLS_KEY_DEV: ${{ secrets.TLS_KEY_DEV }}
          ACCESS_TOKEN_DEV: ${{ secrets.ACCESS_TOKEN_DEV }}
          CML_PASSWORD: ${{ secrets.CML_PASSWORD }}
          API_SECRET: ${{ secrets.API_SECRET }}
          MONGO_DB_ROOT_PASSWORD: ${{ secrets.MONGO_DB_ROOT_PASSWORD }}
          AWX_PASSWORD: ${{ secrets.AWX_PASSWORD }}
          NLP_SECRET: ${{ secrets.NLP_SECRET }}
          AWS_PASSWORD: ${{ secrets.AWS_PASSWORD }}
          BOT_ID_DEV: ${{ secrets.BOT_ID_DEV }}
          BOT_NAME_DEV: ${{ secrets.BOT_NAME_DEV }}
          AUTHORIZED_ROOMS_DEV: ${{ secrets.AUTHORIZED_ROOMS_DEV }}
          PUBLIC_ADDRESS_DEV: ${{ secrets.PUBLIC_ADDRESS_DEV }}
          SERVER_LIST_DEV: ${{ secrets.SERVER_LIST_DEV }}
          CML_USERNAME: ${{ secrets.CML_USERNAME }}
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_SERVER_DEV: ${{ secrets.MONGO_SERVER_DEV }}
          AWX_SERVER: ${{ secrets.AWX_SERVER }}
          AWX_USERNAME: ${{ secrets.AWX_USERNAME }}
          NLP_SERVER_DEV: ${{ secrets.NLP_SERVER_DEV }}
          VCENTER_SERVER: ${{ secrets.VCENTER_SERVER }}
          ADMINISTRATORS_DEV: ${{ secrets.ADMINISTRATORS_DEV }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: Apply and rollout
        run: |
          kubectl apply -f output-secrets-dev.yaml
          kubectl apply -f output-manifest-dev.yaml
          kubectl rollout restart deployment/colabot-dev-1
          rm output-secrets-dev.yaml
          rm output-manifest-dev.yaml
